name: Run tests

on: [ push, pull_request ]

jobs:
  test:
    name: Run unit tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: formflow-test
          POSTGRES_USER: formflow
          POSTGRES_PASSWORD: formflow
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - name: Set up ChromeDriver
        uses: nanasess/setup-chromedriver@v1.0.7
      - name: Set up JDK
        uses: actions/setup-java@v3.4.0
        with:
          distribution: 'adopt'
          java-version: '17'
          cache: 'gradle'
#      In [GitHub docs](https://docs.github.com/en/actions/using-containerized-services/creating-postgresql-service-containers#testing-the-postgresql-service-container), they have this step that manually connects to Postgres, but do we need to do
#      something similiar?
#      - name: Connect to PostgreSQL
#        # Runs a script that creates a PostgreSQL table, populates
#        # the table with data, and then retrieves the data.
#        run: node client.js
#        # Environment variables used by the `client.js` script to create a new PostgreSQL table.
#        env:
#          # The hostname used to communicate with the PostgreSQL service container
#          POSTGRES_HOST: postgres
#          # The default PostgreSQL port
#          POSTGRES_PORT: 5432
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Test with Gradle
        run: ./gradlew test --rerun-tasks --scan
      - name: Cleanup Gradle Cache
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties
